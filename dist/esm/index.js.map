{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Capacitor, registerPlugin } from '@capacitor/core';\r\n\r\nimport type {\r\n  FreeraspPlugin,\r\n  FreeraspConfig,\r\n  NativeEventEmitterActions,\r\n  SuspiciousAppInfo,\r\n  PackageInfo,\r\n} from './definitions';\r\nimport { Threat } from './definitions';\r\nimport { getThreatCount, itemsHaveType } from './utils';\r\n\r\nconst activeListeners: any[] = [];\r\n\r\nconst Freerasp = registerPlugin<FreeraspPlugin>('Freerasp', {});\r\n\r\nconst onInvalidCallback = (): void => {\r\n  Freerasp.onInvalidCallback();\r\n};\r\n\r\nconst getThreatIdentifiers = async (): Promise<number[]> => {\r\n  const { ids } = await Freerasp.getThreatIdentifiers();\r\n  if (ids.length !== getThreatCount() || !itemsHaveType(ids, 'number')) {\r\n    onInvalidCallback();\r\n  }\r\n  return ids;\r\n};\r\n\r\nconst getThreatChannelData = async (): Promise<[string, string, string]> => {\r\n  const dataLength = Capacitor.getPlatform() === 'ios' ? 2 : 3;\r\n  const { ids } = await Freerasp.getThreatChannelData();\r\n  if (ids.length !== dataLength || !itemsHaveType(ids, 'string')) {\r\n    onInvalidCallback();\r\n  }\r\n  return ids;\r\n};\r\n\r\nconst prepareMapping = async (): Promise<void> => {\r\n  const newValues = await getThreatIdentifiers();\r\n  const threats = Threat.getValues();\r\n\r\n  threats.map((threat, index) => {\r\n    threat.value = newValues[index];\r\n  });\r\n};\r\n\r\n// parses base64-encoded malware data to SuspiciousAppInfo[]\r\nconst parseMalwareData = async (\r\n  data: string[],\r\n): Promise<SuspiciousAppInfo[]> => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const suspiciousAppData = data.map(entry => toSuspiciousAppInfo(entry));\r\n      resolve(suspiciousAppData);\r\n    } catch (error: any) {\r\n      reject(`Parsing app data failed: ${error}`);\r\n    }\r\n  });\r\n};\r\n\r\nconst toSuspiciousAppInfo = (base64Value: string): SuspiciousAppInfo => {\r\n  const data = JSON.parse(atob(base64Value));\r\n  const packageInfo = data.packageInfo as PackageInfo;\r\n  return { packageInfo, reason: data.reason } as SuspiciousAppInfo;\r\n};\r\n\r\nconst setThreatListeners = async <T extends NativeEventEmitterActions>(\r\n  callbacks: T & Record<Exclude<keyof T, keyof NativeEventEmitterActions>, []>,\r\n): Promise<void> => {\r\n  const [channel, key, malwareKey] = await getThreatChannelData();\r\n  await prepareMapping();\r\n\r\n  await Freerasp.addListener(channel, async (event: any) => {\r\n    if (event[key] === undefined) {\r\n      onInvalidCallback();\r\n    }\r\n    switch (event[key]) {\r\n      case Threat.PrivilegedAccess.value:\r\n        callbacks.privilegedAccess?.();\r\n        break;\r\n      case Threat.Debug.value:\r\n        callbacks.debug?.();\r\n        break;\r\n      case Threat.Simulator.value:\r\n        callbacks.simulator?.();\r\n        break;\r\n      case Threat.AppIntegrity.value:\r\n        callbacks.appIntegrity?.();\r\n        break;\r\n      case Threat.UnofficialStore.value:\r\n        callbacks.unofficialStore?.();\r\n        break;\r\n      case Threat.Hooks.value:\r\n        callbacks.hooks?.();\r\n        break;\r\n      case Threat.DeviceBinding.value:\r\n        callbacks.deviceBinding?.();\r\n        break;\r\n      case Threat.Passcode.value:\r\n        callbacks.passcode?.();\r\n        break;\r\n      case Threat.SecureHardwareNotAvailable.value:\r\n        callbacks.secureHardwareNotAvailable?.();\r\n        break;\r\n      case Threat.ObfuscationIssues.value:\r\n        callbacks.obfuscationIssues?.();\r\n        break;\r\n      case Threat.DeviceID.value:\r\n        callbacks.deviceID?.();\r\n        break;\r\n      case Threat.DevMode.value:\r\n        callbacks.devMode?.();\r\n        break;\r\n      case Threat.SystemVPN.value:\r\n        callbacks.systemVPN?.();\r\n        break;\r\n      case Threat.Malware.value:\r\n        callbacks.malware?.(await parseMalwareData(event[malwareKey]));\r\n        break;\r\n      case Threat.ADBEnabled.value:\r\n        callbacks.adbEnabled?.();\r\n        break;\r\n              case Threat.Screenshot.value:\r\n                callbacks.screenshot?.();\r\n                break;\r\n              case Threat.ScreenRecording.value:\r\n                callbacks.screenRecording?.();\r\n                break;\r\n      default:\r\n        onInvalidCallback();\r\n        break;\r\n    }\r\n  });\r\n};\r\n\r\nconst removeThreatListeners = (): void => {\r\n  activeListeners.forEach(listener => listener.remove());\r\n};\r\n\r\nconst startFreeRASP = async <T extends NativeEventEmitterActions>(\r\n  config: FreeraspConfig,\r\n  reactions: T & Record<Exclude<keyof T, keyof NativeEventEmitterActions>, []>,\r\n): Promise<boolean> => {\r\n  await setThreatListeners(reactions);\r\n  try {\r\n    const { started } = await Freerasp.talsecStart({ config });\r\n    return started;\r\n  } catch (e: any) {\r\n    console.error(`${e.code}: ${e.message}`);\r\n    return Promise.reject(`${e.code}: ${e.message}`);\r\n  }\r\n};\r\n\r\nconst addToWhitelist = async (packageName: string): Promise<boolean> => {\r\n  if (Capacitor.getPlatform() === 'ios') {\r\n    return Promise.reject('Malware detection not available on iOS');\r\n  }\r\n  const { result } = await Freerasp.addToWhitelist({ packageName });\r\n  return result;\r\n};\r\n\r\nconst getAppIcon = async (packageName: string): Promise<string> => {\r\n  if (Capacitor.getPlatform() === 'ios') {\r\n    return Promise.reject(\r\n      'App icon retrieval for Malware detection not available on iOS',\r\n    );\r\n  }\r\n  const { result } = await Freerasp.getAppIcon({ packageName });\r\n  return result;\r\n};\r\n\r\nconst blockScreenCapture = async (enable: boolean): Promise<boolean> => {\r\n  if (Capacitor.getPlatform() === 'ios') {\r\n    return Promise.reject('Block Screen Capture is not available on iOS');\r\n  }\r\n  const { result } = await Freerasp.blockScreenCapture({ enable });\r\n  return result;\r\n};\r\n\r\nconst isScreenCaptureBlocked = async (): Promise<boolean> => {\r\n  if (Capacitor.getPlatform() === 'ios') {\r\n    return Promise.reject('Screen Capture Status is not available on iOS');\r\n  }\r\n  const { result } = await Freerasp.isScreenCaptureBlocked();\r\n  return result;\r\n};\r\n\r\nexport * from './definitions';\r\nexport {\r\n  Freerasp,\r\n  startFreeRASP,\r\n  setThreatListeners,\r\n  removeThreatListeners,\r\n  addToWhitelist,\r\n  getAppIcon,\r\n    blockScreenCapture,\r\n    isScreenCaptureBlocked,\r\n};\r\n"]}