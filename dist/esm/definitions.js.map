{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AA+E5C,MAAM,OAAO,MAAM;IAsBjB,YAAY,KAAa;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,MAAM,CAAC,SAAS;QACd,OAAO,SAAS,CAAC,WAAW,EAAE,KAAK,SAAS;YAC1C,CAAC,CAAC;gBACE,IAAI,CAAC,YAAY;gBACjB,IAAI,CAAC,gBAAgB;gBACrB,IAAI,CAAC,KAAK;gBACV,IAAI,CAAC,KAAK;gBACV,IAAI,CAAC,QAAQ;gBACb,IAAI,CAAC,SAAS;gBACd,IAAI,CAAC,0BAA0B;gBAC/B,IAAI,CAAC,SAAS;gBACd,IAAI,CAAC,aAAa;gBAClB,IAAI,CAAC,eAAe;gBACpB,IAAI,CAAC,OAAO;gBACZ,IAAI,CAAC,iBAAiB;gBACtB,IAAI,CAAC,OAAO;gBACZ,IAAI,CAAC,OAAO;gBACZ,IAAI,CAAC,UAAU;gBACf,IAAI,CAAC,UAAU;gBACL,IAAI,CAAC,eAAe;aAC/B;YACH,CAAC,CAAC;gBACE,IAAI,CAAC,YAAY;gBACjB,IAAI,CAAC,gBAAgB;gBACrB,IAAI,CAAC,KAAK;gBACV,IAAI,CAAC,KAAK;gBACV,IAAI,CAAC,QAAQ;gBACb,IAAI,CAAC,SAAS;gBACd,IAAI,CAAC,0BAA0B;gBAC/B,IAAI,CAAC,SAAS;gBACd,IAAI,CAAC,aAAa;gBAClB,IAAI,CAAC,QAAQ;gBACb,IAAI,CAAC,eAAe;gBAClB,IAAI,CAAC,UAAU;gBACP,IAAI,CAAC,eAAe;aAC/B,CAAC;IACR,CAAC;;AA3DM,mBAAY,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AAC7B,uBAAgB,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AACjC,YAAK,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AACtB,YAAK,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AACtB,eAAQ,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AACzB,gBAAS,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AAC1B,iCAA0B,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AAC3C,gBAAS,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AAC1B,oBAAa,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AAC9B,eAAQ,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AACzB,sBAAe,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AAChC,cAAO,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AACxB,wBAAiB,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AAClC,cAAO,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AACxB,cAAO,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AACxB,iBAAU,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AAC3B,iBAAU,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC;AAC3B,sBAAe,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC","sourcesContent":["import { Capacitor } from '@capacitor/core';\r\n\r\nexport interface FreeraspPlugin {\r\n  addListener(listener: string, callback: (event: any) => void): any;\r\n  talsecStart(options: {\r\n    config: FreeraspConfig;\r\n  }): Promise<{ started: boolean }>;\r\n  onInvalidCallback(): void;\r\n  getThreatIdentifiers(): Promise<{ ids: number[] }>;\r\n  getThreatChannelData(): Promise<{ ids: [string, string, string] }>;\r\n  addToWhitelist(options: {\r\n    packageName: string;\r\n  }): Promise<{ result: boolean }>;\r\n  getAppIcon(options: { packageName: string }): Promise<{ result: string }>;\r\n  blockScreenCapture(options: {\r\n      enable: boolean;\r\n    }): Promise<{ result: boolean }>;\r\n  isScreenCaptureBlocked(): Promise<{ result: boolean }>;\r\n}\r\n\r\nexport type FreeraspConfig = {\r\n  androidConfig?: AndroidConfig;\r\n  iosConfig?: IOSConfig;\r\n  watcherMail: string;\r\n  isProd?: boolean;\r\n};\r\n\r\nexport type AndroidConfig = {\r\n  packageName: string;\r\n  certificateHashes: string[];\r\n  supportedAlternativeStores?: string[];\r\n  malwareConfig?: MalwareConfig;\r\n};\r\n\r\nexport type IOSConfig = {\r\n  appBundleId: string;\r\n  appTeamId: string;\r\n};\r\n\r\nexport type MalwareConfig = {\r\n  blacklistedHashes?: string[];\r\n  blacklistedPackageNames?: string[];\r\n  suspiciousPermissions?: string[][];\r\n  whitelistedInstallationSources?: string[];\r\n};\r\n\r\nexport type SuspiciousAppInfo = {\r\n  packageInfo: PackageInfo;\r\n  reason: string;\r\n};\r\n\r\nexport type PackageInfo = {\r\n  packageName: string;\r\n  appName?: string;\r\n  version?: string;\r\n  appIcon?: string;\r\n  installerStore?: string;\r\n};\r\n\r\nexport type NativeEventEmitterActions = {\r\n  privilegedAccess?: () => any;\r\n  debug?: () => any;\r\n  simulator?: () => any;\r\n  appIntegrity?: () => any;\r\n  unofficialStore?: () => any;\r\n  hooks?: () => any;\r\n  deviceBinding?: () => any;\r\n  deviceID?: () => any;\r\n  passcode?: () => any;\r\n  secureHardwareNotAvailable?: () => any;\r\n  obfuscationIssues?: () => any;\r\n  devMode?: () => any;\r\n  systemVPN?: () => any;\r\n  malware?: (suspiciousApps: SuspiciousAppInfo[]) => any;\r\n  adbEnabled?: () => any;\r\n  screenshot?: () => any;\r\n  screenRecording?: () => any;\r\n};\r\n\r\nexport class Threat {\r\n  value: number;\r\n\r\n  static AppIntegrity = new Threat(0);\r\n  static PrivilegedAccess = new Threat(0);\r\n  static Debug = new Threat(0);\r\n  static Hooks = new Threat(0);\r\n  static Passcode = new Threat(0);\r\n  static Simulator = new Threat(0);\r\n  static SecureHardwareNotAvailable = new Threat(0);\r\n  static SystemVPN = new Threat(0);\r\n  static DeviceBinding = new Threat(0);\r\n  static DeviceID = new Threat(0);\r\n  static UnofficialStore = new Threat(0);\r\n  static Overlay = new Threat(0);\r\n  static ObfuscationIssues = new Threat(0);\r\n  static DevMode = new Threat(0);\r\n  static Malware = new Threat(0);\r\n  static ADBEnabled = new Threat(0);\r\n  static Screenshot = new Threat(0);\r\n  static ScreenRecording = new Threat(0);\r\n\r\n  constructor(value: number) {\r\n    this.value = value;\r\n  }\r\n\r\n  static getValues(): Threat[] {\r\n    return Capacitor.getPlatform() === 'android'\r\n      ? [\r\n          this.AppIntegrity,\r\n          this.PrivilegedAccess,\r\n          this.Debug,\r\n          this.Hooks,\r\n          this.Passcode,\r\n          this.Simulator,\r\n          this.SecureHardwareNotAvailable,\r\n          this.SystemVPN,\r\n          this.DeviceBinding,\r\n          this.UnofficialStore,\r\n          this.Overlay,\r\n          this.ObfuscationIssues,\r\n          this.DevMode,\r\n          this.Malware,\r\n          this.ADBEnabled,\r\n          this.Screenshot,\r\n                    this.ScreenRecording,\r\n        ]\r\n      : [\r\n          this.AppIntegrity,\r\n          this.PrivilegedAccess,\r\n          this.Debug,\r\n          this.Hooks,\r\n          this.Passcode,\r\n          this.Simulator,\r\n          this.SecureHardwareNotAvailable,\r\n          this.SystemVPN,\r\n          this.DeviceBinding,\r\n          this.DeviceID,\r\n          this.UnofficialStore,\r\n            this.Screenshot,\r\n                    this.ScreenRecording,\r\n        ];\r\n  }\r\n}\r\n"]}